deploy:
  runs-on: ubuntu-latest
  if: github.ref == 'refs/heads/main'
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: "npm"

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_SITE_URL: https://jsilverman.ca

    - name: Setup SSH key and test connection
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        chmod 700 ~/.ssh
        ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts

        echo "üîë Testing SSH connection..."
        ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no ${{ secrets.USERNAME }}@${{ secrets.HOST }} "echo '‚úÖ SSH connection successful! Server: $(hostname)'"

    - name: Create backup on server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          echo "üîÑ Starting backup process..."
          if [ -d "~/public_html" ] && [ "$(ls -A ~/public_html)" ]; then
            cp -r ~/public_html ~/backup_$(date +%Y%m%d_%H%M%S) 2>/dev/null || true
            echo "‚úÖ Backup created"
          else
            echo "‚ÑπÔ∏è No existing files to backup"
          fi

          if [ -f "~/public_html/.htaccess" ]; then
            cp ~/public_html/.htaccess ~/htaccess_backup
            echo "üìã .htaccess backed up"
          fi

          rm -rf ~/public_html/* 2>/dev/null || true
          rm -rf ~/public_html/.[^.]* 2>/dev/null || true

          if [ -f "~/htaccess_backup" ]; then
            mv ~/htaccess_backup ~/public_html/.htaccess
            echo "üìã .htaccess restored"
          fi

          echo "‚úÖ Directory cleared and ready"

    - name: Deploy files via SCP
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "out/*"
        target: "~/public_html/"
        strip_components: 1
        rm: false

    - name: Set correct permissions and configure server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          echo "üîß Setting file permissions..."
          find ~/public_html -type f -exec chmod 644 {} \; 2>/dev/null || true
          find ~/public_html -type d -exec chmod 755 {} \; 2>/dev/null || true

          file_count=$(find ~/public_html -type f | wc -l)
          echo "üìÅ Total files deployed: $file_count"

          if [ ! -f "~/public_html/.htaccess" ]; then
            echo "üìù Creating .htaccess file..."
            cat > ~/public_html/.htaccess << 'EOF'
          # Security headers
          <IfModule mod_headers.c>
              Header always set X-Content-Type-Options nosniff
              Header always set X-Frame-Options DENY
              Header always set X-XSS-Protection "1; mode=block"
          </IfModule>

          # Enable compression
          <IfModule mod_deflate.c>
              AddOutputFilterByType DEFLATE text/plain text/html text/xml text/css text/javascript application/javascript
          </IfModule>

          # Handle Next.js routing
          <IfModule mod_rewrite.c>
              RewriteEngine On
              RewriteCond %{REQUEST_FILENAME} !-f
              RewriteCond %{REQUEST_FILENAME} !-d
              RewriteRule . /index.html [L]
          </IfModule>
          EOF
            echo "‚úÖ .htaccess created"
          fi

          echo "üéØ Deployment complete!"

    - name: Verify deployment
      run: |
        echo "‚è±Ô∏è Waiting for deployment to propagate..."
        sleep 15

        if curl -f -s -I https://jsilverman.ca/ | grep -q "200"; then
          echo "‚úÖ Deployment successful - https://jsilverman.ca is live!"
        elif curl -f -s -I http://jsilverman.ca/ | grep -q "200"; then
          echo "‚úÖ Deployment successful - Site is accessible via HTTP"
        else
          echo "‚ö†Ô∏è Site verification pending - may still be propagating"
        fi
