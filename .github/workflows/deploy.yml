name: Deploy to GoDaddy via SSH

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "20"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Type check
        run: npm run type-check

      - name: Run tests
        run: npm run test

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SITE_URL: https://jsilverman.ca

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: out/
          retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: out/

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts

      - name: Create backup on server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Create backup of current site
            if [ -d "~/public_html" ] && [ "$(ls -A ~/public_html)" ]; then
              cp -r ~/public_html ~/backup_$(date +%Y%m%d_%H%M%S) 2>/dev/null || true
              echo "‚úÖ Backup created"
            fi

            # Clear public_html but keep .htaccess if it exists
            if [ -f "~/public_html/.htaccess" ]; then
              cp ~/public_html/.htaccess ~/htaccess_backup
            fi

            rm -rf ~/public_html/*
            rm -rf ~/public_html/.[^.]*

            if [ -f "~/htaccess_backup" ]; then
              mv ~/htaccess_backup ~/public_html/.htaccess
            fi

            echo "‚úÖ Directory cleared"

      - name: Deploy files via SCP
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "out/*"
          target: "~/public_html/"
          strip_components: 1
          rm: false

      - name: Set correct permissions
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Set proper permissions
            find ~/public_html -type f -exec chmod 644 {} \;
            find ~/public_html -type d -exec chmod 755 {} \;

            # Create simple .htaccess if none exists
            if [ ! -f "~/public_html/.htaccess" ]; then
              cat > ~/public_html/.htaccess << 'EOF'
            # Static site .htaccess

            # Security headers
            <IfModule mod_headers.c>
                Header always set X-Content-Type-Options nosniff
                Header always set X-Frame-Options DENY
                Header always set X-XSS-Protection "1; mode=block"
            </IfModule>

            # Enable compression
            <IfModule mod_deflate.c>
                AddOutputFilterByType DEFLATE text/plain text/html text/xml text/css text/javascript application/javascript application/json
            </IfModule>

            # Cache static assets
            <IfModule mod_expires.c>
                ExpiresActive On
                ExpiresDefault "access plus 1 month"
                ExpiresByType text/css "access plus 1 year"
                ExpiresByType application/javascript "access plus 1 year"
                ExpiresByType image/png "access plus 1 year"
                ExpiresByType image/jpg "access plus 1 year"
                ExpiresByType image/jpeg "access plus 1 year"
                ExpiresByType image/svg+xml "access plus 1 year"
                ExpiresByType application/font-woff "access plus 1 year"
                ExpiresByType application/font-woff2 "access plus 1 year"
            </IfModule>

            # WebAssembly files
            <IfModule mod_mime.c>
                AddType application/wasm .wasm
            </IfModule>

            # Handle Next.js routing
            <IfModule mod_rewrite.c>
                RewriteEngine On
                
                # Try files, then directories, then fallback to index.html
                RewriteCond %{REQUEST_FILENAME} !-f
                RewriteCond %{REQUEST_FILENAME} !-d
                RewriteRule . /index.html [L]
            </IfModule>
            EOF
              echo "‚úÖ .htaccess created"
            fi

            echo "‚úÖ Permissions set"

      - name: Verify deployment
        run: |
          echo "‚è±Ô∏è Waiting for deployment to propagate..."
          sleep 15

          # Check if site is accessible
          if curl -f -s https://jsilverman.ca/ > /dev/null; then
            echo "‚úÖ Deployment successful - https://jsilverman.ca is accessible"
          else
            echo "‚ö†Ô∏è Site may still be propagating or there may be an issue"
            echo "Checking HTTP version..."
            if curl -f -s http://jsilverman.ca/ > /dev/null; then
              echo "‚úÖ HTTP version accessible - SSL may be propagating"
            else
              echo "‚ùå Site not accessible via HTTP either"
              exit 1
            fi
          fi

      - name: Notify success
        if: success()
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "üåê Site: https://jsilverman.ca"
          echo "üìä Build time: $(date)"
